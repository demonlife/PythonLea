* Basic Python
** 判断
   if x: pass
   只要x是非零数值、非空字符串、非空list, 非None， 非空dict等，就判断为True，否则为False
** set
   set的初始化:
   s = set() #空set
   s = set([1, 2, 3, 3]) #set必须使用list来初始化, 并且set会除去重复的元素
   set的原理和dict一样, 不能放入可变对象
   参看如下的实例:
   s = set([[1, 2], 3, 4]) # error
   s = set([(1, 2), 3, 4]) # right
   set可以做集合运算, list不可以
   s1 & s2 #交集
   s1 | s2 #并集
   ...
** 不变对象
   对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容
** 函数
   完全可以把一个函数名赋值给一个变量,  相当于给这个函数起了一个"别名"
   a = abs
   a(-1) #=> 1
   python中对匿名函数提供了有限的支持, 就是只能有一个表达式, 不用写return, 返回值就是该表达式的结果
*** functools
    偏函数
    import functools
    int2 = functools.partial(int, base=2)
    int2('10000')
    functools.partial的作用就是，把一个函数的某些参数（不管有没有默认值）给固定住（也就是设置默认值），
    返回一个新的函数，调用这个新函数会更简单
    创建偏函数时，要从右到左固定参数
*** 默认参数
    定义默认参数必须指向不变的对象, 否则会出现一些很奇怪的问题
    对于任何函数, 通过类似func(*args, **kw)的形式调用它，不管它的参数是如何定义的
*** 递归调用
    解决递归调用栈溢出的方法是通过尾递归优化。
    尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
    这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，
    不会出现栈溢出的情况
    尾调用的定义: http://zh.wikipedia.org/zh-cn/%E5%B0%BE%E8%B0%83%E7%94%A8
    但是python没有对尾递归做优化, 一个针对尾递归优化的decorator,参考源码:
    http://code.activestate.com/recipes/474088-tail-call-optimization-decorator/

    针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，
    没有循环语句的编程语言只能通过尾递归实现循环
** for
   当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，
   而我们不太关心该对象究竟是list还是其他数据类型
   判断一个对象是否是可迭代对象:
   from collections import Iterable
   isinstance('abc', Iterable) #=> True, 可迭代对象, False不可迭代对象

   enumerate可以将list变成索引-元素对
   for i, v in enumrate([1, 2, 3]):
       print i, v
** 生成器
   创建生成器的方法
   1. 将一个列表生成式稍作变化即可,
      g = (s for s in xrange(11))
   2. 将一个函数变成生成器
      只需将return换成yield即可
      变成generator的函数，
       在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行
** 模块搜索路径
   import sys
   sys.path #=> 输出模块的加载路径
*** 添加修改路径
    1. 修改sys.path
       sys.path.append('/loadpath')
    2. 设置PYTHONPATH
** 使用__future__
   把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性
   例如:
   from __future__ import unicode_literals
   print isinstance('xxx', unicode) #=> True

   from __future__ import division
   10 / 3 #=> 3.3333
** 对象
   获取对象信息
   type(xx)
   python将每种type类型都定义好了常量, 放在types模块里, 使用之前, 导入即可
   import types
   if type('abc') == types.StringType: xx
   注意有一种类型就叫TypeType，所有类型本身的类型就是TypeType, 如:
   type(int) == type(str) == types.TypeType

   能用type()判断的基本类型也可以用isinstance()判断
   isinstance()还可以判断一个变量是否是某些类型中的一种
   isinstance('a', (str, unicode))
   利用hasattr(), getattr(), setattr()可以操作一个对象的状态
   如果在使用getattr()获取不存在的属性时, 会报错, 可以设定一个默认值
   getattr(obj, 'z', 404) #属性z不存在, 就返回404
   getattr() 也可以获取对象的方法
*** __slots__   
    想限制类的属性, 就需要用到__slots__变量
    __slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的
    除非在子类中也定义__slots__,这样,子类允许定义的属性就是自身的__slots__加上父类的__slots__

    如果父类没有定义__slots__, 则子类定义的__slots__的不起作用
*** 对类的所有属性和方法调用全部动态化, __getattr__
    只有在没有找到属性的情况下, 才调用__getattr__, 已有的属性, 不会在__getattr__
    中查找, 利用该方法可以动态的调用
    class Chain(object):
        def __init__(self, path=''):
            self._path = path

        def __getattr__(self, path):
            return Chain('%s/%s' % (self._path, path))

        def __str__(self):
            return self._path
    具体使用参看codesegment/objecttypes.py
*** 可调用
    通过callable(), 可以判断出一个对象是否是"可调用"对象
    任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用
*** Mixin
    如果需要“混入”额外的功能，通过多重继承就可以实现，
    比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为Mixin。
    为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixin和FlyableMixin。
    类似的，你还可以定义出肉食动物CarnivorousMixin和植食动物HerbivoresMixin，
    让某个动物同时拥有好几个Mixin
    
    class Dog(Mammal, RunnableMixin, CarnivorousMixin):
        pass
*** 定制类
    通过实现类的特定方法, 如__str__, __len__等等方法
    __str__: 将类返回一个好看的格式
    __iter__: 类可以迭代, 此时还要定义next方法
    __getitem__: 类可以当做list来取数据, 此时入股传入的是一个slice, 需要对slice做特殊处理
    例如:
    class Fib(object):
    def __getitem__(self, n):
        if isinstance(n, int):
            a, b = 1, 1
            for x in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice):
            start = n.start
            stop = n.stop
            a, b = 1, 1
            L = []
            for x in range(stop + 1):
                if x >= start:
                    L.append(a)
                a, b = b, a + b
            return L
    __call__: 可以直接对实例进行调用,__call__()还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样
*** 使用type创建类    
    type()函数既可以返回一个对象的类型，又可以创建出新的类型
    参考codesegment/objecttypes.py
*** metaclass
    控制类的创建行为，还可以使用metaclass
    即:先定义metaclass，就可以创建类，最后创建实例
    参见 codesegment/metaclass.py
    
